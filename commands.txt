
copy files from local to remote computer via ssh:
scp local/path/filename ad6813@shell4.doc.ic.ac.uk:/remote/path
scp ad6813@shell4.doc.ic.ac.uk:/remote/path/filename local/path

Where are package configuration files stored:
(stored automatically during setup)
/usr/local/lib


Locate file:
locate file_name_substring
notice you need no wild cards, no inverted commas to locate file
containing substring.
to locate file with exactly file_name as filename:
locate 'file_name'
to locate file ending with file_name_end:
locate '*file_name_end'
to locate file starting with file_name_neg:
locate 'file_name_beg*'


Locate file with find:
find -name "text"
to separate stdout from stderr (stdout to file):
find -name "text" > temp.txt


Locate text within files:
to look in whole filesystem:
grep "text" /*
to look in a specific directory:
grep "text" /path/to/directory/*
to look in a specific directory and all its subdirectories:
grep "text" -r /path/to/directory/
notice no wildcard is needed in this case

Locate multiple words within files:
grep "word1\|word2\|word3" /path/to/files


Redirect stderr, stdout to file AND print stderr, stdout to console:
do_something 2>&1 | tee -a some_file


Force copy recursively:
cp -rf target destination_directory
if this doesn't work, then your cp is aliased
move to another environment (bash, ksh, tcsh) and try again
hopefully cp won't be aliased everywhere


How much size space on disk:
df -h                //-h is for human readable form
du -s -h path/to/dir //how much space does dir take
du -h path/to/dir    //recursive




Extract archives:
  to unpack tar.gz aka .tgz:
tar zxvf archive_name.tgz
  to unpack tar.gz and place files in another folder:
tar zxvf archive_name.tgz -C /path/to/directory
  to unpack filename from arch.tar, create and store in dir:
tar -xf arch.tar dir/filename

  

Unzip:
unzip file.zip -d destination_folder


List running processes:
ps aux
all user processes:
ps
all processes containing substrings:
ps auwxx | grep <substring of top attribute> | grep <other substring of top attribute>


Keep process running:
http://askubuntu.com/questions/8653/how-to-keep-processes-running-after-ending-ssh-session


Disable screensaver:
gsettings set org.gnome.settings-daemon.plugins.power active false


Run process in background without interruption even if logout, take 1:
//btw, concurrent processes can simply be obtained with '&'
//parallel computing requires root access because OS usually manages that
//tmux just keeps a whole shell running even if you log out, until machine 
//reboots. so having multiple tmuxes doesn't increases parallelism I think!
tmux                            //starts a detached shell
<command that launches process> //starts a process on that shell
<hotkey: Ctrl-b d>              //returns from detached shell to home shell
tmux ls                         //list all detached shells
tmux a -t <tmux number>         //moves to specified detached shell


Run process in background without interruption even if logout, take 2:
nohup     //no hang-up
example:
nohup rlwrap sicstus -l my_wol.pl < input.txt > output.txt 2>&1 &
//run sicstus with my_wol.pl consulted and execute commands in
//input.txt and redirect stderr/stdout to output.txt and place process
//in background
ps aux | grep ad6813   //to find your running process

view image:
mirage <img_name>


What is my distro:
lsb_release -cs
trusty


Is my machine 32 bit or 64 bit:
uname -m
//x86_64 means part of X86 family, uses 64 bit registers, 64 bit mem
addresses, max 2^64 main memory


System performance stats:
nmon         //loads of awesome stuff!


Display CPU info:
less /proc/cpuinfo
//you have a dual core hyperthreading processor 
//http://www.makeuseof.com/tag/hyperthreading-technology-explained/
//http://www.richweb.com/cpu_info



Uninstall:
sudo apt-get --purge remove program_name


Install package from command line:
cd to directory containing .deb file
sudo spkg -i that_package.deb


Solve unmet dependencies:
//note: last time I had this, I went to .deb file in downloads
//and manually installed it using above.
General installation issues, 2 useful posts:
http://askubuntu.com/questions/140246/how-do-i-resolve-unmet-dependencies
http://ubuntuforums.org/showthread.php?t=1986644


Clean space:
sudo apt-get autoremove


Change mode of a file:
(ie change the rwx permissions) 
to give full permission:
chmod 777 filename


Okular:
okular file_name


Determine pixels in image file:
identify filename.jpg


Navigate on vim:


What's my version of scrapy:
scrapy version -v


How much RAM am I using:
free -m


What's my internet speed:
wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip
//will download a 10MB file to dustbin then print avg download speed

PPA installation:
sudo add-apt ppa:name_of_ppa
sudo apt-get update
sudo apt-get install program_name
ppa means personal package archive


Check if a library/package is installed:
locate library_name
or, for more info
dpkg -s library_name


Which packages include a specific file:
apt-file search filename


Install any python library:
inside the uncompressed directory for the lib, enter:
sudo python setup.py install


Get file size (or image pixel size):
ls -lh
//-h stands for human readable


What does apt stand for:
advanced packaging tool


What does ppa stand for:
personal package archive


view processor activity:
top
htop //looks nicer/cooler, with graphical CPU usage for each core


view gpu activity:
nvidia-smi -a


Launch utorrent:
http://askubuntu.com/questions/104094/how-to-install-utorrent-step-by-step


Launch gummi:
gummi filename.tex

Install latex package:
Note! you just need package.sty to be present in directory of latex file
for it to load when opening the latex file.
otherwise:
go to http://www.ctan.org/search
enter package search query
follow rest of instructions at
http://www.inf.ed.ac.uk/systems/tex/new-packages.html
under 'installing a package yourself'

Connect to postgres database system:
psql --username=<username> --dbname=<database_name>


Scroll/navigate through output:
less <command>


Add plugin to emacs:
1) place myplugin.el in ~/.emacs.d/
2) add to ~/.emacs:
(add-to-list 'load-path "~/.emacs.d/")
(load "myplugin.el")
2) or if that doesn't work, instead:
(require 'myplugin)


Lynx browser:
MOVEMENT:
   Down arrow     - Highlight next topic
   Up arrow       - Highlight previous topic
   Right arrow,   - Jump to highlighted topic
   Return, Enter  - Follow selected link
   Left arrow     - Return to previous topic

SCROLLING: 
   CTRL-A         - Go to first page of the current document (Home)
   CTRL-E         - Go to last page of the current document (End)
   CTRL-B         - Scroll up to previous page (Page-Up)
   CTRL-F         - Scroll down to next page (Page-Down)

DIRED:
   d              - Download selected file
   f              - Show a full menu of options for current file

OTHER:       
   ? (or h)       - Help (this screen)
   d              - Download the current link
   g              - Goto a user specified URL or file
   p              - Print to a file, mail, printers, or other
   q              - Quit (Capital 'Q' for quick quit)
   /              - Search for a string within the current document
   V              - Go to the Visited Links Page
   z              - Cancel transfer in progress
   [backspace]    - Go to the History Page
   =  - Show info about current document, URL and link
   CTRL-R         - Reload current file and refresh the screen
   CTRL-L         - Refresh the screen
   CTRL-U         - Inside text input line or field,
                    erase input line (more input line commands)
   CTRL-G         - Cancel input or transfer


   
